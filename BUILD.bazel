# BUILD

load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//python:image.bzl", "py_image")

# Define the Docker image using rules_docker's py_image for Python applications
py_image(
    name = "pytorch_image",
    base = "runpod/pytorch:1.13.0-py3.10-cuda11.7.1-devel",
    srcs = glob(["src/**"]),  # Include all source files
    requirements = "//builder:requirements.txt",  # Reference to requirements.txt
    deps = [
        "//builder:cache_model.py",
        # Add other dependencies if necessary
    ],
    env = {
        "HF_HOME": "/cache/huggingface",
        "HF_DATASETS_CACHE": "/cache/huggingface/datasets",
        "DEFAULT_HF_METRICS_CACHE": "/cache/huggingface/metrics",
        "DEFAULT_HF_MODULES_CACHE": "/cache/huggingface/modules",
        "HUGGINFACE_HUB_CACHE": "/cache/huggingface/hub",
        "HUGGINGFACE_ASSETS_CACHE": "/cache/huggingface/assets",
    },
    workdir = "/workspace",
    cmd = ["python", "-u", "handler.py"],
    shell = ["/bin/bash", "-o", "pipefail", "-c"],
    # Additional configurations as needed
)

# Define a Docker layer for installing system packages
container_layer(
    name = "install_ffmpeg",
    commands = [
        "apt-get update && apt-get install -y ffmpeg",
    ],
)

# Define a Docker layer for Python dependencies
container_layer(
    name = "install_python_deps",
    commands = [
        "pip install --upgrade pip wheel setuptools",
        "pip install -r /requirements.txt",
    ],
    files = {
        "/requirements.txt": "builder/requirements.txt",
    },
)

# Define a Docker layer for flash-attn
container_layer(
    name = "install_flash_attn",
    commands = [
        "MAX_JOBS=32 pip install -v flash-attn --no-build-isolation",
    ],
)

# Define a Docker layer for caching models
container_layer(
    name = "cache_models",
    commands = [
        "python /cache_model.py",
        "rm /cache_model.py",
    ],
    files = {
        "/cache_model.py": "builder/cache_model.py",
    },
)

# Define a Docker layer for copying source code
container_layer(
    name = "copy_source",
    commands = [
        "mkdir -p /workspace",
        "cp -r src/* /workspace/",
    ],
)

# Define a Docker layer for validating the cache
container_layer(
    name = "validate_cache",
    commands = [
        'test -n "$(ls -A /cache/huggingface)"',
    ],
)
